{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/Arc.ts","webpack:///./src/Circle.ts","webpack:///./src/Color.ts","webpack:///./src/Keyboard.ts","webpack:///./src/Line.ts","webpack:///./src/Oval.ts","webpack:///./src/Randomizer.ts","webpack:///./src/Rectangle.ts","webpack:///./src/Text.ts","webpack:///./src/Timers.ts","webpack:///./src/WebImage.ts","webpack:///./src/baseObj.ts","webpack:///./src/consoleCommands.ts","webpack:///./src/index.ts","webpack:///./src/setup.ts","webpack:///./src/shapes.ts","webpack:///./src/userInteraction.ts","webpack:///./src/utils.ts"],"names":[],"mappings":";;;;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAkF;AAClF;AACA;AACA,UAAU;AACV;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AAC3B;AACA;AACA;AACO,kBAAkB,8CAAO;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM;AAC1C,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA;AACA,wCAAwC,6CAAM;AAC9C,oCAAoC,6CAAM,KAAK,6CAAM;AACrD,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM,KAAK,6CAAM;AACrD;AACA;AACA;AACA;AACA;AACA,kBAAkB,2DAAY;AAC9B;AACA;AACA;AACA;AACA,0BAA0B,0DAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9IA;AAAA;AAAA;AAAiF;AACjF;AACA;AACA;AACO,qBAAqB,8CAAO;AACnC;AACA;AACA;AACA;AACA;AACA,sBAAsB,yDAAU;AAChC,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;AACA,6BAA6B,yDAAU;AACvC,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM;AAC1C,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA;AACA,wCAAwC,6CAAM;AAC9C,oCAAoC,6CAAM,KAAK,6CAAM;AACrD,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM,KAAK,6CAAM;AACrD;AACA;AACA;AACA,eAAe,2DAAY;AAC3B;AACA;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAqC;AACrC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iBAAiB,GAAG,IAAI,IAAI,MAAM,IAAI,KAAK,EAAE,aAAa,MAAM,OAAO;AAC3F;AACA;AACA;AACA,mBAAmB,iDAAU,oBAAoB;AACjD;AACA;AACA;AACA,qBAAqB,iDAAU,oBAAoB;AACnD;AACA;AACA;AACA,uBAAuB,iDAAU,oBAAoB;AACrqCAAqC,EAAE,aAAa,EAAE,aAAa,EAAE;AACrE;AACA,iEAAiE,EAAE,sEAAsE,EAAE;AAC3I;AACA,8EAA8E,EAAE,qDAAqD,EAAE;AACvI;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/VA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/HA;AAAA;AAAA;AAA8F;AAC9F;AACA;AACA;AACO,mBAAmB,8CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yDAAU;AAChC,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU,SAAS,QAAQ,IAAI,QAAQ,QAAQ,QAAQ,IAAI,QAAQ;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM;AAC1C;AACA;AACA;AACA;AACA;AACA,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA,sBAAsB,2DAAY;AAClC,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA;AACA,8CAA8C,6CAAM;AACpD,0CAA0C,6CAAM,KAAK,6CAAM;AAC3D,0CAA0C,6CAAM;AAChD,0CAA0C,6CAAM,KAAK,6CAAM;AAC3D;AACA;AACA;AACA,sBAAsB,0DAAW;AACjC;AACA;AACA,uBAAuB,2DAAY;AACnC;AACA;AACA;AACA;;;;;;;;;;;;;AC9JA;AAAA;AAAA;AAAgF;AAChF;AACA;AACA;AACO,mBAAmB,8CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yDAAU;AAChC,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM;AAC1C,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA,QAAQ,0CAAG;AACX;AACA;AACA,uCAAuC,6CAAM;AAC7C,sBAAsB,6CAAM,KAAK,6CAAM;AACvC,oCAAoC,6CAAM;AAC1C,sBAAsB,6CAAM,KAAK,6CAAM;AACvC;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,uBAAuB,EAAE,uBAAuB,EAAE,uBAAuB;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAgF;AAChF;AACA;AACA;AACO,wBAAwB,8CAAO;AACtC;AACA;AACA;AACA;AACA;AACA,sBAAsB,yDAAU;AAChC,0CAA0C,MAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAU;AACvC,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM;AAC1C,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA;AACA,uCAAuC,6CAAM;AAC7C,sBAAsB,6CAAM,KAAK,6CAAM;AACvC,oCAAoC,6CAAM;AAC1C,sBAAsB,6CAAM,KAAK,6CAAM;AACvC;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAW;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnHA;AAAA;AAAA;AAAA;AAAoE;AACpE;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO,mBAAmB,8CAAO;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,KAAK,oBAAoB,KAAK,MAAM,SAAS;AACtH;AACA;AACA;AACA,QAAQ,0CAAG;AACX,kBAAkB,0CAAG;AACrB;AACA;AACA;AACA;AACA,6CAA6C,KAAK,KAAK,SAAS;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,EAAE,qBAAqB,KAAK,MAAM,SAAS;AACrH;AACA,QAAQ,0CAAG;AACX,kBAAkB,0CAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0EAA0E,KAAK,qBAAqB,KAAK,MAAM,SAAS;AACxH;AACA,QAAQ,0CAAG;AACX,kBAAkB,0CAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,0CAAG;AACX,kBAAkB,0CAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE,KAAK,2BAA2B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,OAAO;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM;AAC1C,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX,QAAQ,0CAAG;AACX;AACA;AACA,uCAAuC,6CAAM;AAC7C,sBAAsB,6CAAM,KAAK,6CAAM;AACvC,oCAAoC,6CAAM;AAC1C,sBAAsB,6CAAM,KAAK,6CAAM;AACvC;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAW;AACrC;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,sCAAsC,MAAM;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACO;AACP;AACA;AACA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAsD;AACtD;AACA;AACA;AACO,uBAAuB,gDAAS;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,IAAI;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8BAA8B;AAC7C,kBAAkB,kDAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ,0DAA0D;AACnF;AACA;AACA,gBAAgB;AAChB;AACA;AACA,oCAAoC,6CAAM;AAC1C,oCAAoC,6CAAM;AAC1C;AACA;AACA,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf,YAAY,0CAAG;AACf;AACA;AACA;;;;;;;;;;;;;ACzGA;AAAA;AAAA;AAAkE;AAClE;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,UAAU,OAAO,QAAQ,IAAI,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAU;AACvB,0CAA0C,MAAM;AAChD;AACA,qBAAqB,yDAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mGAAmG,EAAE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,yDAAU;AACvB,0CAA0C,EAAE;AAC5C;AACA,6BAA6B,yDAAU;AACvaAAa,yDAAU;AACvB,0CAA0C,EAAE;AAC5C;AACA,sBAAsB,yDAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kDAAG;AACX;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,qDAAM;AACd;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA,eAAe,6DAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,WAAW,6CAAM;AACjB,QAAQ,6CAAM,aAAa,6CAAM;AACjC;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,6CAAM;AACvB,mBAAmB,iBAAiB;AACpC;AACA,YAAY,6CAAM;AAClB;AACA;AACA;AACA;AACA;AACA,wBAAwB,6CAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,6CAAM,6BAA6B,mBAAmB;AAC9E;AACA;AACA;AACA;AACA,wBAAwB,6CAAM;AAC9B;AACA;AACA;AACA;AACA,wBAAwB,6CAAM;AAC9B;AACA;AACA;AACA,oBAAoB,6CAAM;AAC1B;AACA;AACA;AACA,YAAY,6CAAM;AAClB;AACA;AACA,IAAI,6CAAM,aAAa,6CAAM;AAC7B;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,SAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,yBAAyB,QAAQ,IAAI,EAAE,GAAG,EAAE;AAC5C;AACA;AACA,mBAAmB,SAAS;AAC5B,0CAA0C,QAAQ,IAAI,EAAE,GAAG,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iBAAiB,6CAAM;AACvB,IAAI,6CAAM,oBAAoB,QAAQ;AACtC;AACA;AACA;AACA;AACA,IAAI,6CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAM;AACd;AACA;AACA;AACA;AACA,0CAA0C,QAAQ;AAClD,aAAa;AACb;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA,wBAAwB,6CAAM;AAC9B,wBAAwB,6CAAM;AAC9B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA;AACA,wBAAwB,6CAAM;AAC9B;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,IAAI,6CAAM,aAAa,6CAAM;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,gBAAgB;AAChB,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,gBAAgB;AAChB,KAAK;AACL;;;;;;;;;;;;;ACpsI;AACmB;AACrH;AACyK;AACnK;AACE;AACN;AACJ;AACM;AACV;AACQ;AACG;AACJ;AACP;AACwC;AAC4B;AACnB;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2BAA2B,mBAAmB,yBAAyB;;;;;;;;;;;;;AC5BvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,MAAM;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,MAAM;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6CAAM;AACpC,6BAA6B,6CAAM;AACnC;AACA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACtC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,QAAQ,0CAAG,iBAAiB,6CAAM,QAAQ,6CAAM;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AACjC;AACA;AACA;AACA;AACO;AACP,IAAI,6CAAM;AACV;AACA;AACA;AACA;AACA;AACO;AACP,IAAI,6CAAM;AACV;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA","file":"codehs_lib.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { baseObj, ctx, rotatePoint, lineDistance, camera, canvas } from \"./index\";\n/**\n * The enum to set the arc's mode\n * @enum {number}\n * @readonly\n */\nexport var ArcMode;\n(function (ArcMode) {\n    /** The value for degrees */\n    ArcMode[ArcMode[\"DEGREES\"] = 0] = \"DEGREES\";\n    /** The value for radians */\n    ArcMode[ArcMode[\"RADIANS\"] = 1] = \"RADIANS\";\n})(ArcMode || (ArcMode = {}));\n/**\n * The Arc shape\n */\nexport class Arc extends baseObj {\n    constructor(radius, startingAngle, endingAngle, mode, x, y, counterClockwise) {\n        super();\n        this.x = x !== null && x !== void 0 ? x : 0;\n        this.y = y !== null && y !== void 0 ? y : 0;\n        this._radius = radius;\n        this._sa = mode === ArcMode.DEGREES ? (startingAngle * Math.PI) / 180 : startingAngle;\n        this._ea = mode === ArcMode.DEGREES ? (endingAngle * Math.PI) / 180 : endingAngle;\n        this._cc = counterClockwise !== null && counterClockwise !== void 0 ? counterClockwise : false;\n        this.type = \"Arc\";\n    }\n    /**\n     * The radius of the arc\n     */\n    set radius(v) {\n        this._radius = v;\n    }\n    get radius() {\n        return this._radius;\n    }\n    /**\n     * The starting angle of the arc\n     */\n    set startingAngle(v) {\n        this._sa = v;\n    }\n    get startingAngle() {\n        return this._sa;\n    }\n    /**\n     * Set the new startingAngle\n     * @param angle the new starting angle\n     */\n    setStartingAngle(angle) {\n        this._sa = angle;\n        return this;\n    }\n    /**\n     * The ending angle of the arc\n     */\n    set endingAngle(v) {\n        this._ea = v;\n    }\n    get endingAngle() {\n        return this._ea;\n    }\n    /**\n     * Whether or not the arc is counterclockwise\n     */\n    set counterClockwise(cc) {\n        this._cc = cc;\n    }\n    get counterClockwise() {\n        return this._cc;\n    }\n    /**\n     * Set the ending angle of the arc\n     * @param angle The new ending angle\n     */\n    setEndingAngle(angle) {\n        this._sa = angle;\n        return this;\n    }\n    /**\n     * Set the starting and ending angle of the arc\n     * @param startingAngle the new starting angle\n     * @param endingAngle the new ending angle\n     */\n    setAngle(startingAngle, endingAngle) {\n        this._sa = startingAngle;\n        this._ea = endingAngle;\n        return this;\n    }\n    /**\n     * Returns the angle of the arc\n     */\n    getAngle() {\n        return {\n            startingAngle: this._sa,\n            endingAngle: this._ea,\n        };\n    }\n    draw() {\n        const cx = this.still ? 0 : camera.x;\n        const cy = this.still ? 0 : camera.y;\n        ctx.save();\n        ctx.beginPath();\n        ctx.translate(this.x - cx, this.y - cy);\n        ctx.rotate(this.rotation);\n        ctx.arc(0, 0, this._radius, this._sa, this._ea, this._cc);\n        ctx.lineTo(0, 0);\n        ctx.closePath();\n        if (this.outline) {\n            ctx.strokeStyle = this.outlineColor;\n            ctx.lineWidth = this.outlineWidth;\n            ctx.stroke();\n        }\n        ctx.fillStyle = this.color;\n        ctx.fill();\n        ctx.restore();\n    }\n    onScreen() {\n        return (this.x + this.radius >= camera.x &&\n            this.x - this.radius <= camera.x + canvas.width &&\n            this.y + this.radius >= camera.y &&\n            this.y - this.radius <= camera.y + canvas.height);\n    }\n    containsPoint(x, y) {\n        x -= this.x;\n        y -= this.y;\n        const oW = this.outline ? this.outlineWidth / 2 : 0;\n        const R = lineDistance(0, 0, x, y);\n        if (R >= this._radius + oW) {\n            return false;\n        }\n        if (this.rotation !== 0) {\n            const point = rotatePoint(x, y, this.rotation);\n            x = point.x;\n            y = point.y;\n        }\n        let A = Math.atan2(y, x);\n        if (A < 0) {\n            A += 2 * Math.PI;\n        }\n        return this._cc !== (this._sa < this._ea ? this._sa < A && A < this._ea : A > this._sa || A < this._ea);\n    }\n}\n","import { baseObj, ctx, lineDistance, checkColor, camera, canvas } from \"./index\";\n/**\n * The Circle shape\n */\nexport class Circle extends baseObj {\n    constructor(radius, x, y, color, outline, outlineColor) {\n        super();\n        this.x = x !== null && x !== void 0 ? x : 0;\n        this.y = y !== null && y !== void 0 ? y : 0;\n        this.color = color !== null && color !== void 0 ? color : \"black\";\n        if (color && !checkColor(color)) {\n            console.warn(`The color ${color} is not a valid color`);\n            this.color = \"black\";\n        }\n        this.outline = outline || false;\n        this.outlineColor = outlineColor || \"black\";\n        if (outlineColor && !checkColor(outlineColor)) {\n            console.warn(`The outline color ${outlineColor} is not a valid color`);\n            this.outlineColor = \"black\";\n        }\n        this._radius = radius;\n        this.type = \"Circle\";\n    }\n    /**\n     * The circle's radius\n     */\n    set radius(v) {\n        this._radius = Math.abs(v);\n    }\n    get radius() {\n        return this._radius;\n    }\n    /**\n     * The circle's diameter\n     */\n    set diameter(v) {\n        this._radius = Math.abs(2 * v);\n    }\n    get diameter() {\n        return 2 * this._radius;\n    }\n    /**\n     * Returns the Circle's diameter\n     */\n    getDiameter() {\n        return 2 * this._radius;\n    }\n    /**\n     * Sets the Circle's diameter to `diameter`\n     * @param diameter the new diameter\n     */\n    setDiameter(diameter) {\n        this._radius = Math.abs(2 * diameter);\n        return this;\n    }\n    /**\n     * Returns the Circle's radius\n     */\n    getRadius() {\n        return this._radius;\n    }\n    /**\n     * Sets the Circle's radius to `radius`\n     * @param radius the new radius\n     */\n    setRadius(radius) {\n        this._radius = Math.abs(radius);\n        return this;\n    }\n    draw() {\n        const cx = this.still ? 0 : camera.x;\n        const cy = this.still ? 0 : camera.y;\n        ctx.beginPath();\n        ctx.arc(this.x - cx, this.y - cy, this._radius, 0, Math.PI * 2);\n        if (this.outline) {\n            ctx.strokeStyle = this.outlineColor;\n            ctx.lineWidth = this.outlineWidth;\n            ctx.stroke();\n        }\n        ctx.fillStyle = this.color;\n        ctx.fill();\n    }\n    onScreen() {\n        return (this.x + this.radius >= camera.x &&\n            this.x - this.radius <= camera.x + canvas.width &&\n            this.y + this.radius >= camera.y &&\n            this.y - this.radius <= camera.y + canvas.height);\n    }\n    containsPoint(x, y) {\n        const oW = this.outline ? this.outlineWidth / 2 : 0;\n        return lineDistance(this.x, this.y, x, y) < this.radius + oW;\n    }\n}\n","import { Randomizer } from \"./index\";\n/**\n * The object that contains all the colors\n */\nexport class Color extends String {\n    /**\n     * @constructor\n     * @param red the value of red from 0-255\n     * @param green the value of green from 0-255\n     * @param blue the value of blue from 0-255\n     * @param alpha the value of the opacity from 0 to 1\n     */\n    constructor(red, green, blue, alpha) {\n        if (red < 0 || red > 255) {\n            console.warn(\"The red should be between 0 and 255\");\n        }\n        if (green < 0 || green > 255) {\n            console.warn(\"The green should be between 0 and 255\");\n        }\n        if (blue < 0 || blue > 255) {\n            console.warn(\"The blue should be between 0 and 255\");\n        }\n        if (alpha && (alpha < 0 || alpha > 1)) {\n            console.warn(\"The alpha should be between 0 and 1\");\n        }\n        super(`rgb${alpha ? \"a\" : \"\"}(${red}, ${green}, ${blue}${alpha ? `, ${alpha}` : \"\"})`);\n    }\n    /** Returns a random shade of Red */\n    static randomRed() {\n        return `#${Randomizer.randomHex(32, 255)}1010`;\n    }\n    /** Returns a random shade of Green */\n    static randomGreen() {\n        return `#10${Randomizer.randomHex(32, 255)}10`;\n    }\n    /** Returns a random shade of Blue */\n    static randomBlue() {\n        return `#1010${Randomizer.randomHex(32, 255)}`;\n    }\n}\n/** The css color black */\nColor.black = \"#000000\";\n/** The css color silver */\nColor.silver = \"#c0c0c0\";\n/** The css color gray */\nColor.gray = \"#808080\";\n/** The css color white */\nColor.white = \"#ffffff\";\n/** The css color maroon */\nColor.maroon = \"#800000\";\n/** The css color red */\nColor.red = \"#ff0000\";\n/** The css color purple */\nColor.purple = \"#800080\";\n/** The css color fuchsia */\nColor.fuchsia = \"#ff00ff\";\n/** The css color green */\nColor.green = \"#008000\";\n/** The css color lime */\nColor.lime = \"#00ff00\";\n/** The css color olive */\nColor.olive = \"#808000\";\n/** The css color yellow */\nColor.yellow = \"#ffff00\";\n/** The css color navy */\nColor.navy = \"#000080\";\n/** The css color blue */\nColor.blue = \"#0000ff\";\n/** The css color teal */\nColor.teal = \"#008080\";\n/** The css color aqua */\nColor.aqua = \"#00ffff\";\n/** The css color orange */\nColor.orange = \"#ffa500\";\n/** The css color aliceblue */\nColor.aliceblue = \"#f0f8ff\";\n/** The css color antiquewhite */\nColor.antiquewhite = \"#faebd7\";\n/** The css color aquamarine */\nColor.aquamarine = \"#7fffd4\";\n/** The css color azure */\nColor.azure = \"#f0ffff\";\n/** The css color beige */\nColor.beige = \"#f5f5dc\";\n/** The css color bisque */\nColor.bisque = \"#ffe4c4\";\n/** The css color blanchedalmond */\nColor.blanchedalmond = \"#ffebcd\";\n/** The css color blueviolet */\nColor.blueviolet = \"#8a2be2\";\n/** The css color brown */\nColor.brown = \"#a52a2a\";\n/** The css color burlywood */\nColor.burlywood = \"#deb887\";\n/** The css color cadetblue */\nColor.cadetblue = \"#5f9ea0\";\n/** The css color chartreuse */\nColor.chartreuse = \"#7fff00\";\n/** The css color chocolate */\nColor.chocolate = \"#d2691e\";\n/** The css color coral */\nColor.coral = \"#ff7f50\";\n/** The css color cornflowerblue */\nColor.cornflowerblue = \"#6495ed\";\n/** The css color cornsilk */\nColor.cornsilk = \"#fff8dc\";\n/** The css color crimson */\nColor.crimson = \"#dc143c\";\n/** The css color cyan */\nColor.cyan = \"#00ffff\";\n/** The css color darkblue */\nColor.darkblue = \"#00008b\";\n/** The css color darkcyan */\nColor.darkcyan = \"#008b8b\";\n/** The css color darkgoldenrod */\nColor.darkgoldenrod = \"#b8860b\";\n/** The css color darkgray */\nColor.darkgray = \"#a9a9a9\";\n/** The css color darkgreen */\nColor.darkgreen = \"#006400\";\n/** The css color darkgrey */\nColor.darkgrey = \"#a9a9a9\";\n/** The css color darkkhaki */\nColor.darkkhaki = \"#bdb76b\";\n/** The css color darkmagenta */\nColor.darkmagenta = \"#8b008b\";\n/** The css color darkolivegreen */\nColor.darkolivegreen = \"#556b2f\";\n/** The css color darkorange */\nColor.darkorange = \"#ff8c00\";\n/** The css color darkorchid */\nColor.darkorchid = \"#9932cc\";\n/** The css color darkred */\nColor.darkred = \"#8b0000\";\n/** The css color darksalmon */\nColor.darksalmon = \"#e9967a\";\n/** The css color darkseagreen */\nColor.darkseagreen = \"#8fbc8f\";\n/** The css color darkslateblue */\nColor.darkslateblue = \"#483d8b\";\n/** The css color darkslategray */\nColor.darkslategray = \"#2f4f4f\";\n/** The css color darkslategrey */\nColor.darkslategrey = \"#2f4f4f\";\n/** The css color darkturquoise */\nColor.darkturquoise = \"#00ced1\";\n/** The css color darkviolet */\nColor.darkviolet = \"#9400d3\";\n/** The css color deeppink */\nColor.deeppink = \"#ff1493\";\n/** The css color deepskyblue */\nColor.deepskyblue = \"#00bfff\";\n/** The css color dimgray */\nColor.dimgray = \"#696969\";\n/** The css color dimgrey */\nColor.dimgrey = \"#696969\";\n/** The css color dodgerblue */\nColor.dodgerblue = \"#1e90ff\";\n/** The css color firebrick */\nColor.firebrick = \"#b22222\";\n/** The css color floralwhite */\nColor.floralwhite = \"#fffaf0\";\n/** The css color forestgreen */\nColor.forestgreen = \"#228b22\";\n/** The css color gainsboro */\nColor.gainsboro = \"#dcdcdc\";\n/** The css color ghostwhite */\nColor.ghostwhite = \"#f8f8ff\";\n/** The css color gold */\nColor.gold = \"#ffd700\";\n/** The css color goldenrod */\nColor.goldenrod = \"#daa520\";\n/** The css color greenyellow */\nColor.greenyellow = \"#adff2f\";\n/** The css color grey */\nColor.grey = \"#808080\";\n/** The css color honeydew */\nColor.honeydew = \"#f0fff0\";\n/** The css color hotpink */\nColor.hotpink = \"#ff69b4\";\n/** The css color indianred */\nColor.indianred = \"#cd5c5c\";\n/** The css color indigo */\nColor.indigo = \"#4b0082\";\n/** The css color ivory */\nColor.ivory = \"#fffff0\";\n/** The css color khaki */\nColor.khaki = \"#f0e68c\";\n/** The css color lavender */\nColor.lavender = \"#e6e6fa\";\n/** The css color lavenderblush */\nColor.lavenderblush = \"#fff0f5\";\n/** The css color lawngreen */\nColor.lawngreen = \"#7cfc00\";\n/** The css color lemonchiffon */\nColor.lemonchiffon = \"#fffacd\";\n/** The css color lightblue */\nColor.lightblue = \"#add8e6\";\n/** The css color lightcoral */\nColor.lightcoral = \"#f08080\";\n/** The css color lightcyan */\nColor.lightcyan = \"#e0ffff\";\n/** The css color lightgoldenrodyellow */\nColor.lightgoldenrodyellow = \"#fafad2\";\n/** The css color lightgray */\nColor.lightgray = \"#d3d3d3\";\n/** The css color lightgreen */\nColor.lightgreen = \"#90ee90\";\n/** The css color lightgrey */\nColor.lightgrey = \"#d3d3d3\";\n/** The css color lightpink */\nColor.lightpink = \"#ffb6c1\";\n/** The css color lightsalmon */\nColor.lightsalmon = \"#ffa07a\";\n/** The css color lightseagreen */\nColor.lightseagreen = \"#20b2aa\";\n/** The css color lightskyblue */\nColor.lightskyblue = \"#87cefa\";\n/** The css color lightslategray */\nColor.lightslategray = \"#778899\";\n/** The css color lightslategrey */\nColor.lightslategrey = \"#778899\";\n/** The css color lightsteelblue */\nColor.lightsteelblue = \"#b0c4de\";\n/** The css color lightyellow */\nColor.lightyellow = \"#ffffe0\";\n/** The css color limegreen */\nColor.limegreen = \"#32cd32\";\n/** The css color linen */\nColor.linen = \"#faf0e6\";\n/** The css color magenta */\nColor.magenta = \"#ff00ff\";\n/** The css color mediumaquamarine */\nColor.mediumaquamarine = \"#66cdaa\";\n/** The css color mediumblue */\nColor.mediumblue = \"#0000cd\";\n/** The css color mediumorchid */\nColor.mediumorchid = \"#ba55d3\";\n/** The css color mediumpurple */\nColor.mediumpurple = \"#9370db\";\n/** The css color mediumseagreen */\nColor.mediumseagreen = \"#3cb371\";\n/** The css color mediumslateblue */\nColor.mediumslateblue = \"#7b68ee\";\n/** The css color mediumspringgreen */\nColor.mediumspringgreen = \"#00fa9a\";\n/** The css color mediumturquoise */\nColor.mediumturquoise = \"#48d1cc\";\n/** The css color mediumvioletred */\nColor.mediumvioletred = \"#c71585\";\n/** The css color midnightblue */\nColor.midnightblue = \"#191970\";\n/** The css color mintcream */\nColor.mintcream = \"#f5fffa\";\n/** The css color mistyrose */\nColor.mistyrose = \"#ffe4e1\";\n/** The css color moccasin */\nColor.moccasin = \"#ffe4b5\";\n/** The css color navajowhite */\nColor.navajowhite = \"#ffdead\";\n/** The css color oldlace */\nColor.oldlace = \"#fdf5e6\";\n/** The css color olivedrab */\nColor.olivedrab = \"#6b8e23\";\n/** The css color orangered */\nColor.orangered = \"#ff4500\";\n/** The css color orchid */\nColor.orchid = \"#da70d6\";\n/** The css color palegoldenrod */\nColor.palegoldenrod = \"#eee8aa\";\n/** The css color palegreen */\nColor.palegreen = \"#98fb98\";\n/** The css color paleturquoise */\nColor.paleturquoise = \"#afeeee\";\n/** The css color palevioletred */\nColor.palevioletred = \"#db7093\";\n/** The css color papayawhip */\nColor.papayawhip = \"#ffefd5\";\n/** The css color peachpuff */\nColor.peachpuff = \"#ffdab9\";\n/** The css color peru */\nColor.peru = \"#cd853f\";\n/** The css color pink */\nColor.pink = \"#ffc0cb\";\n/** The css color plum */\nColor.plum = \"#dda0dd\";\n/** The css color powderblue */\nColor.powderblue = \"#b0e0e6\";\n/** The css color rosybrown */\nColor.rosybrown = \"#bc8f8f\";\n/** The css color royalblue */\nColor.royalblue = \"#4169e1\";\n/** The css color saddlebrown */\nColor.saddlebrown = \"#8b4513\";\n/** The css color salmon */\nColor.salmon = \"#fa8072\";\n/** The css color sandybrown */\nColor.sandybrown = \"#f4a460\";\n/** The css color seagreen */\nColor.seagreen = \"#2e8b57\";\n/** The css color seashell */\nColor.seashell = \"#fff5ee\";\n/** The css color sienna */\nColor.sienna = \"#a0522d\";\n/** The css color skyblue */\nColor.skyblue = \"#87ceeb\";\n/** The css color slateblue */\nColor.slateblue = \"#6a5acd\";\n/** The css color slategray */\nColor.slategray = \"#708090\";\n/** The css color slategrey */\nColor.slategrey = \"#708090\";\n/** The css color snow */\nColor.snow = \"#fffafa\";\n/** The css color springgreen */\nColor.springgreen = \"#00ff7f\";\n/** The css color steelblue */\nColor.steelblue = \"#4682b4\";\n/** The css color tan */\nColor.tan = \"#d2b48c\";\n/** The css color thistle */\nColor.thistle = \"#d8bfd8\";\n/** The css color tomato */\nColor.tomato = \"#ff6347\";\n/** The css color turquoise */\nColor.turquoise = \"#40e0d0\";\n/** The css color violet */\nColor.violet = \"#ee82ee\";\n/** The css color wheat */\nColor.wheat = \"#f5deb3\";\n/** The css color whitesmoke */\nColor.whitesmoke = \"#f5f5f5\";\n/** The css color yellowgreen */\nColor.yellowgreen = \"#9acd32\";\n/** The css color rebeccapurple */\nColor.rebeccapurple = \"#663399\";\n/**\n * Checks if a string is a color\n * @param color color to check\n */\nexport const checkColor = (color) => {\n    const hexColor = /^#([a-fA-F0-9]{3}|[a-fA-F0-9]{6}|[a-fA-F0-9]{8})$/;\n    // eslint-disable-next-line max-len\n    const rgbColor = /^rgb(\\((([01]?\\d?\\d|2([0-4]\\d|5[0-5])), ?){2}([01]?\\d?\\d|2([0-4]\\d|5[0-5]))|a\\((([01]?\\d?\\d|2([0-4]\\d|5[0-5])), ?){3}(1|0?(.\\d+)?))\\)$/;\n    // eslint-disable-next-line max-len\n    const hslColor = /^hsl(\\((3([0-5]\\d|60)|[0-2]?(\\d)?\\d)(, ?((100|\\d?\\d)%)){2}|a\\((3([0-5]\\d|60)|[0-2]?(\\d)?\\d)(, ?((100|\\d?\\d)%)){2}, ?(1|0(.\\d+)?))\\)$/;\n    return (color instanceof CanvasGradient ||\n        hexColor.test(color) ||\n        rgbColor.test(color) ||\n        hslColor.test(color) ||\n        Object.prototype.hasOwnProperty.call(Color, color.toLowerCase()));\n};\n","/**\n * CodeHS's Keyboard object. If possible use the built-in javascript\n * KeyboardEvent.key or KeyboardEvent.code in your handler\n * (Included for compatibility with CodeHS, compare to e.code instead of e.keyCode)\n * @deprecated\n */\nexport class Keyboard {\n    /**\n     * The key for the Left Alt\n     */\n    static get ALT_LEFT() {\n        return \"AltLeft\";\n    }\n    /**\n     * The key for the right Alt\n     */\n    static get ALT_RIGHT() {\n        return \"AltRight\";\n    }\n    /**\n     * The key for BACKSPACE\n     */\n    static get BACKSPACE() {\n        return \"Backspace\";\n    }\n    /**\n     * The key for CAPS LOCK\n     */\n    static get CAPS_LOCK() {\n        return \"CapsLock\";\n    }\n    /**\n     * The key for the left CTRL\n     */\n    static get CTRL_LEFT() {\n        return \"ControlLeft\";\n    }\n    /**\n     * The key for the right CTRL\n     */\n    static get CTRL_RIGHT() {\n        return \"ControlRight\";\n    }\n    /**\n     * The key for DOWN\n     */\n    static get DOWN() {\n        return \"ArrowDown\";\n    }\n    /**\n     * The key for ENTER\n     */\n    static get ENTER() {\n        return \"Enter\";\n    }\n    /**\n     * The key for LEFT\n     */\n    static get LEFT() {\n        return \"ArrowLeft\";\n    }\n    /**\n     * The key for LEFT COMMAND\n     */\n    static get LEFT_COMMAND() {\n        return \"OSLeft\";\n    }\n    /**\n     * The key for LEFT WINDOW\n     */\n    static get LEFT_WINDOW() {\n        return \"OSLeft\";\n    }\n    /**\n     * The key for RIGHT\n     */\n    static get RIGHT() {\n        return \"ArrowRight\";\n    }\n    /**\n     * The key for RIGHT COMMAND\n     */\n    static get RIGHT_COMMAND() {\n        return \"OSRight\";\n    }\n    /**\n     * The key for RIGHT WINDOW\n     */\n    static get RIGHT_WINDOW() {\n        return \"OSRight\";\n    }\n    /**\n     * The key for SELECT\n     */\n    static get SELECT() {\n        return \"OSLeft\";\n    }\n    /**\n     * The key for the left SHIFT\n     */\n    static get SHIFT_LEFT() {\n        return \"ShiftLeft\";\n    }\n    /**\n     * The key for the right SHIFT\n     */\n    static get SHIFT_RIGHT() {\n        return \"ShiftLeft\";\n    }\n    /**\n     * The key for SPACE\n     */\n    static get SPACE() {\n        return \"Space\";\n    }\n    /**\n     * The key for TAB\n     */\n    static get TAB() {\n        return \"Tab\";\n    }\n    /**\n     * The key for UP\n     */\n    static get UP() {\n        return \"ArrowUp\";\n    }\n}\n","import { baseObj, ctx, rotatePoint, lineDistance, checkColor, camera, canvas } from \"./index\";\n/**\n * The Line shape\n */\nexport class Line extends baseObj {\n    constructor(x1, y1, x2, y2, width, color) {\n        super();\n        this._x1 = x1;\n        this._y1 = y1;\n        this._x2 = x2;\n        this._y2 = y2;\n        this.color = color || \"black\";\n        if (color && !checkColor(color)) {\n            console.warn(`Your color of ${color} is not a valid color`);\n            this.color = \"black\";\n        }\n        this._width = width || 2;\n        this.type = \"Line\";\n    }\n    toString() {\n        return `${this.type} from (${this.x1}, ${this.y1}) to (${this.x2}, ${this.y2})`;\n    }\n    /**\n     * Set the width of the line\n     * @param w the new width\n     */\n    setLineWidth(w) {\n        this._width = w;\n        return this;\n    }\n    /**\n     * X-coordinate for the starting point\n     */\n    set x1(v) {\n        this._x1 = v;\n    }\n    get x1() {\n        return this._x1;\n    }\n    /**\n     * Returns the starting x of the line\n     */\n    getStartX() {\n        return this._x1;\n    }\n    /**\n     * X-coordinate for the ending point\n     */\n    set x2(v) {\n        this._x2 = v;\n    }\n    get x2() {\n        return this._x2;\n    }\n    /**\n     * Returns the ending x of the line\n     */\n    getEndX() {\n        return this._x1;\n    }\n    /**\n     * Y-coordinate for the starting point\n     */\n    set y1(v) {\n        this._y1 = v;\n    }\n    get y1() {\n        return this._y1;\n    }\n    /**\n     * Returns the starting y of the line\n     */\n    getStartY() {\n        return this._x1;\n    }\n    /**\n     * Y-coordinate for the ending point\n     */\n    set y2(v) {\n        this._y2 = v;\n    }\n    get y2() {\n        return this._y2;\n    }\n    /**\n     * Returns the starting y of the line\n     */\n    getEndY() {\n        return this._x1;\n    }\n    setStartpoint(x, y) {\n        if (typeof x === \"number\") {\n            this._x1 = x;\n            this._y1 = y;\n        }\n        else {\n            this._x1 = x.x;\n            this._y1 = x.y;\n        }\n        return this;\n    }\n    setEndpoint(x, y) {\n        if (typeof x === \"number\") {\n            this._x2 = x;\n            this._y2 = y;\n        }\n        else {\n            this._x2 = x.x;\n            this._y2 = x.y;\n        }\n        return this;\n        return this;\n    }\n    setPosition(x1, y1) {\n        return this.setStartpoint(x1, y1);\n    }\n    draw() {\n        const cx = this.still ? 0 : camera.x;\n        const cy = this.still ? 0 : camera.y;\n        const x1 = this._x1 - cx;\n        const y1 = this._y1 - cy;\n        const x2 = this._x2 - cx;\n        const y2 = this._y2 - cy;\n        if (this.outline) {\n            ctx.save();\n            ctx.beginPath();\n            const w = this._width + 2 * this.outlineWidth;\n            const h = lineDistance(this.x1, this.y1, this.x2, this.y2) + 2 * this.outlineWidth;\n            ctx.translate(Math.min(x1, x2) + Math.abs(x1 - x2) / 2, Math.min(y1, y2) + Math.abs(y1 - y2) / 2);\n            ctx.rotate(Math.atan2(-(this.x2 - this.x1), this.y2 - this.y1));\n            ctx.fillStyle = this.outlineColor;\n            ctx.rect(-w / 2, -h / 2, w, h);\n            ctx.fill();\n            ctx.restore();\n        }\n        ctx.beginPath();\n        ctx.lineWidth = this._width;\n        ctx.strokeStyle = this.color;\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.closePath();\n    }\n    onScreen() {\n        return (Math.max(this.x1, this.x2) >= camera.x &&\n            Math.min(this.x1, this.x2) <= camera.x + canvas.width &&\n            Math.max(this.y1, this.y2) >= camera.y &&\n            Math.min(this.y1, this.y2) <= camera.y + canvas.height);\n    }\n    containsPoint(x, y) {\n        const r = Math.atan2(-(this.x2 - this.x1), this.y2 - this.y1);\n        const point = rotatePoint(x - this.x1, y - this.y1, r);\n        x = point.x;\n        y = point.y;\n        const length = lineDistance(this.x1, this.y1, this.x2, this.y2);\n        const oW = this.outline ? this.outlineWidth : 0;\n        return -this._width / 2 - oW < x && x < this._width / 2 + oW && -oW < y && y < length + oW;\n    }\n}\n","import { baseObj, ctx, rotatePoint, checkColor, camera, canvas } from \"./index\";\n/**\n * The oval shape\n */\nexport class Oval extends baseObj {\n    constructor(width, height, x, y, color) {\n        super();\n        this._width = width;\n        this._height = height;\n        this.x = x !== null && x !== void 0 ? x : 0;\n        this.y = y !== null && y !== void 0 ? y : 0;\n        this.color = color || \"black\";\n        if (color && !checkColor(color)) {\n            console.warn(`Your color of ${color} is not a valid color`);\n            this.color = \"black\";\n        }\n    }\n    /**\n     * The width of the oval\n     */\n    set width(v) {\n        this._width = v;\n    }\n    get width() {\n        return this._width;\n    }\n    /**\n     * Set the width of the oval\n     * @param width the new width\n     */\n    setWidth(width) {\n        this._width = width;\n        return this;\n    }\n    /**\n     * The height of the oval\n     */\n    set height(v) {\n        this._height = v;\n    }\n    get height() {\n        return this._height;\n    }\n    /**\n     * Set the height of the oval\n     * @param height the new height\n     */\n    setHeight(height) {\n        this._height = height;\n        return this;\n    }\n    /**\n     * Set the width and height of the oval\n     * @param width the new width of the oval\n     * @param height the new height of the oval\n     */\n    setSize(width, height) {\n        this._width = width;\n        this._height = height;\n        return this;\n    }\n    draw() {\n        const cx = this.still ? 0 : camera.x;\n        const cy = this.still ? 0 : camera.y;\n        ctx.beginPath();\n        ctx.ellipse(this.x - cx, this.y - cy, this._width / 2, this._height / 2, this.rotation, 0, 2 * Math.PI);\n        ctx.fillStyle = this.color;\n        if (this.outline) {\n            ctx.strokeStyle = this.outlineColor;\n            ctx.lineWidth = this.outlineWidth;\n            ctx.stroke();\n        }\n        ctx.fill();\n    }\n    onScreen() {\n        return (this.x + this.width >= camera.x &&\n            this.x <= camera.x + canvas.width &&\n            this.y + this.height >= camera.y &&\n            this.y <= camera.y + canvas.height);\n    }\n    containsPoint(x, y) {\n        x -= this.x;\n        y -= this.y;\n        if (this.rotation !== 0) {\n            const point = rotatePoint(x, y, this.rotation);\n            x = point.x;\n            y = point.y;\n        }\n        const oW = this.outline ? this.outlineWidth / 2 : 0;\n        return x ** 2 / (this._width / 2 + oW) ** 2 + y ** 2 / (this._height / 2 + oW) ** 2 <= 1;\n    }\n}\n","/**\n * The object that returns random values\n */\nexport class Randomizer {\n    constructor() {\n        console.warn(\"Creating a new Randomizer creates a new blank object\");\n    }\n    /**\n     * Returns a random integer between `min` and `max`\n     * @param min minimum value of the integer\n     * @param max maximum value of the integer\n     */\n    static nextInt(min, max) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n    /**\n     * Returns true with a probability of 50% or `probability`%\n     * @param probability The probability of returning true from 0 (never) to 1 (always)\n     */\n    static nextBoolean(probability = 0.5) {\n        if (probability < 0 || probability > 1) {\n            console.warn(`The value of ${probability} is not between 1 and 0. Please pick a valid value`);\n            probability = 0.5;\n        }\n        return Math.random() < probability;\n    }\n    /**\n     * Returns a random float between `min` and `max`\n     * @param min minimum value of the float\n     * @param max maximum value of the float\n     */\n    static nextFloat(min, max) {\n        return Math.random() * (max - min) + min;\n    }\n    /**\n     * Returns a random hexadecimal color\n     */\n    static nextColor() {\n        return `#${this.randomHex(0, 255)}${this.randomHex(0, 255)}${this.randomHex(0, 255)}`;\n    }\n    /**\n     * Returns a random hex string between min and max\n     * @param min minimum value\n     * @param max maximum value\n     */\n    static randomHex(min, max) {\n        const c = this.nextInt(min, max).toString(16);\n        const length = max.toString(16).length;\n        return c.length > length ? c : c.padStart(length, \"0\");\n    }\n    /**\n     * Returns a random value from the array\n     * @param array The array to extract a value from\n     */\n    static randomArrayValue(array) {\n        return array[Math.floor(Math.random() * array.length)];\n    }\n}\n","import { baseObj, ctx, rotatePoint, checkColor, camera, canvas } from \"./index\";\n/**\n * The rectangle shape\n */\nexport class Rectangle extends baseObj {\n    constructor(width, height, x, y, color, rotation, outline, outlineColor) {\n        super();\n        this.x = x !== null && x !== void 0 ? x : 0;\n        this.y = y !== null && y !== void 0 ? y : 0;\n        this.color = color || \"black\";\n        if (color && !checkColor(color)) {\n            console.warn(`Your color of ${color} is not a valid color`);\n            this.color = \"black\";\n        }\n        this.rotation = rotation || 0;\n        this._width = width;\n        this._height = height;\n        this.outline = outline || false;\n        this.outlineColor = outlineColor || \"black\";\n        if (outlineColor && !checkColor(outlineColor)) {\n            console.warn(`Your outline color of ${outlineColor} is not a valid color`);\n            this.outlineColor = \"black\";\n        }\n        this.type = \"Rectangle\";\n    }\n    /**\n     * The rectangle's width\n     */\n    set width(v) {\n        this._width = v;\n    }\n    get width() {\n        return this._width;\n    }\n    /**\n     * Returns the width of the rectangle\n     */\n    getWidth() {\n        return this.width;\n    }\n    /**\n     * Sets the width of the rectangle\n     * @param width the new width\n     */\n    setWidth(width) {\n        this.width = width;\n        return this;\n    }\n    /**\n     * The rectangle's height\n     */\n    set height(v) {\n        this._height = v;\n    }\n    get height() {\n        return this._height;\n    }\n    /**\n     * Returns the height of the rectangle\n     */\n    getHeight() {\n        return this.height;\n    }\n    /**\n     * Sets the height of the rectangle\n     * @param height the new height\n     */\n    setHeight(height) {\n        this.height = height;\n        return this;\n    }\n    /**\n     * Set the width and height of the rectangle\n     * @param width the rectangle's new width\n     * @param height the rectangle's new height\n     */\n    setSize(width, height) {\n        this._width = width;\n        this._height = height;\n        return this;\n    }\n    draw() {\n        const cx = this.still ? 0 : camera.x;\n        const cy = this.still ? 0 : camera.y;\n        ctx.save();\n        ctx.beginPath();\n        ctx.translate(this.x + this._width / 2 - cx, this.y + this._height / 2 - cy);\n        ctx.rotate(this.rotation);\n        ctx.rect(-this._width / 2, -this._height / 2, this._width, this._height);\n        if (this.outline) {\n            ctx.strokeStyle = this.outlineColor;\n            ctx.lineWidth = this.outlineWidth;\n            ctx.stroke();\n        }\n        ctx.fillStyle = this.color;\n        ctx.fill();\n        ctx.restore();\n    }\n    onScreen() {\n        return (this.x + this.width >= camera.x &&\n            this.x <= camera.x + canvas.width &&\n            this.y + this.height >= camera.y &&\n            this.y <= camera.y + canvas.height);\n    }\n    containsPoint(x, y) {\n        x -= this.x + this._width / 2;\n        y -= this.y + this._height / 2;\n        if (this.rotation !== 0) {\n            const point = rotatePoint(x, y, this.rotation);\n            x = point.x;\n            y = point.y;\n        }\n        const oW = this.outline ? this.outlineWidth / 2 : 0;\n        return -this._width / 2 - oW < x && x < this._width / 2 + oW && -this._height / 2 - oW < y && y < this._height / 2 + oW;\n    }\n}\n","import { baseObj, ctx, rotatePoint, camera, canvas } from \"./index\";\n// eslint-disable-next-line max-len\nconst fontRegExp = /^((normal|italic|oblique) )?((normal|small-caps) )?((normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900) )?(\\d+)(px|pt) [\\w]+$/;\n/**\n * Checks if a font matches a canvas font\n * @param font the font to check\n */\nexport const checkFont = (font) => {\n    return fontRegExp.test(font);\n};\n/**\n * The Text shape\n */\nexport class Text extends baseObj {\n    constructor(txt, font, x, y) {\n        super();\n        this.x = x !== null && x !== void 0 ? x : 0;\n        this.y = y !== null && y !== void 0 ? y : 0;\n        this._txt = txt;\n        if (!checkFont(font)) {\n            console.warn(`Please pass a valid font to Text. Your font \"${font}\" should match \\`\\${size}px \\${fontname}\\``);\n            font = \"20px Arial\";\n        }\n        this._font = font.replace(\"pt\", \"px\");\n        ctx.font = this._font;\n        this._w = ctx.measureText(txt).width;\n        this._h = Number(fontRegExp.exec(font)[7]);\n        this.type = \"Text\";\n    }\n    /**\n     * A string that follows the pattern \\`${size}px ${fontname}\\`\n     */\n    set font(v) {\n        this._font = v;\n        v = v.replace(/pt/i, \"px\");\n        this._font = checkFont(v) ? v : \"20px Arial\";\n        if (!checkFont(v)) {\n            console.warn(`Please pass a valid font to Text. Your font \\`${v}\\` should match \\`\\${size}px \\${fontname}\\``);\n        }\n        ctx.font = this._font;\n        this._w = ctx.measureText(this._txt).width;\n        this._h = Number((/(\\d)+/g.exec(this._font) || [0])[0]);\n    }\n    get font() {\n        return this._font;\n    }\n    /**\n     * Allows you to public set the text's font\n     * @param font the new font of the Text\n     */\n    setFont(font) {\n        font = font.replace(/pt/i, \"px\");\n        this._font = checkFont(font) ? font : \"20px Arial\";\n        if (!checkFont(font)) {\n            console.warn(`Please pass a valid font to Text. Your font \\`${font}\\` should match \\`\\${size}px \\${fontname}\\``);\n        }\n        ctx.font = this._font;\n        this._w = ctx.measureText(this._txt).width;\n        this._h = Number((/(\\d)+/g.exec(this._font) || [20])[0]);\n        return this;\n    }\n    /**\n     * The text to display\n     */\n    set text(v) {\n        this._txt = v;\n        ctx.font = this._font;\n        this._w = ctx.measureText(v).width;\n        this._h = Number((/(\\d)+/g.exec(this._font) || [0])[0]);\n    }\n    get text() {\n        return this._txt;\n    }\n    /**\n     * Returns the Text's text\n     */\n    getText() {\n        return this.text;\n    }\n    /**\n     * Sets the text to display to `txt`\n     * @param txt the string to display\n     */\n    setText(txt) {\n        this.text = txt;\n        return this;\n    }\n    /**\n     * The width of the Text\n     * @readonly\n     */\n    get width() {\n        return this._w;\n    }\n    /**\n     * Returns the Text's width\n     */\n    getWidth() {\n        return this._w;\n    }\n    /**\n     * The Text's height\n     */\n    set height(v) {\n        this.font = `${v}px ${this._font.split(\"px \")[1]}`;\n    }\n    get height() {\n        return this._h;\n    }\n    /**\n     * Returns the height of the Text\n     */\n    getHeight() {\n        return this.height;\n    }\n    /**\n     * Set the Height for the Text\n     * @param height {number} the new height\n     */\n    setHeight(height) {\n        this.font = this.font.replace(/\\d+/g, String(height));\n        return this;\n    }\n    draw() {\n        const cx = this.still ? 0 : camera.x;\n        const cy = this.still ? 0 : camera.y;\n        ctx.save();\n        ctx.beginPath();\n        ctx.translate(this.x + this._w / 2 - cx, this.y - this._h / 2 - cy);\n        ctx.rotate(this.rotation);\n        ctx.font = this._font;\n        if (this.outline) {\n            ctx.strokeStyle = this.outlineColor;\n            ctx.strokeText(this._txt, -this._w / 2, this._h / 2);\n        }\n        ctx.fillStyle = this.color;\n        ctx.fillText(this._txt, -this._w / 2, this._h / 2);\n        ctx.restore();\n    }\n    onScreen() {\n        return (this.x + this.width >= camera.x &&\n            this.x <= camera.x + canvas.width &&\n            this.y + this.height >= camera.y &&\n            this.y <= camera.y + canvas.height);\n    }\n    containsPoint(x, y) {\n        x -= this.x + this._w / 2;\n        y -= this.y - this._h / 2;\n        if (this.rotation !== 0) {\n            const point = rotatePoint(x, y, this.rotation);\n            x = point.x;\n            y = point.y;\n        }\n        return -this._w / 2 < x && x < this._w / 2 && -this._h / 2 < y && y < this._h / 2;\n    }\n}\n","/**\n * The array of active timers\n */\nexport const timers = [];\n/**\n * Sets a timer with the callback `callback`\n * @param callback function for the timer to call\n * @param delay delay between the calls\n * @param params the parameters to pass to the callback, can be anything\n * @param name name of the timer\n */\nexport const setTimer = (callback, delay, params, name) => {\n    if (Math.max(delay, 50 / 3) !== delay) {\n        console.warn(`Your delay of ${delay} is shorter than 1 / 60th of a second, please make sure that it is longer or equal to it`);\n        delay = 50 / 3;\n    }\n    const id = window.setInterval(callback, delay, params);\n    timers.push({\n        callback,\n        delay,\n        params,\n        name: name || callback.name,\n        id,\n    });\n};\n/**\n * Stops a previously set timer\n * @param stopId the timer's name or the callback the timer was set with\n */\nexport const stopTimer = (stopId) => {\n    timers.forEach((t) => {\n        if (t.name === stopId || t.callback === stopId) {\n            clearInterval(t.id);\n            timers.splice(timers.indexOf(t), 1);\n        }\n    });\n};\n/**\n * Stops all timers\n */\nexport const stopAllTimers = () => {\n    timers.forEach((t) => clearInterval(t.id));\n    timers.splice(0, timers.length);\n};\n","import { Rectangle, ctx, gcf, camera } from \"./index\";\n/**\n * The Image from the web shape\n */\nexport class WebImage extends Rectangle {\n    constructor(src, width, height, x, y, sx, sy, swidth, sheight) {\n        super(width, height, x !== null && x !== void 0 ? x : 0, y !== null && y !== void 0 ? y : 0, \"#00000000\");\n        this._hasLoaded = false;\n        this._img = new Image();\n        this._img.src = src;\n        this._img.onload = (e) => {\n            const { naturalHeight, naturalWidth } = e.target;\n            this._hasLoaded = true;\n            if (this.width === 0) {\n                this.width = naturalWidth;\n                this.height = naturalHeight;\n            }\n            if (this._sw === 1) {\n                this._sw = naturalWidth;\n                this._sh = naturalHeight;\n            }\n            this.draw();\n        };\n        this._img.onerror = (err) => {\n            console.error(`Image with an src of \"${src}\" failed to load because of the following reason:`, err);\n        };\n        this.type = \"Image\";\n        this._sx = sx !== null && sx !== void 0 ? sx : 0;\n        this._sy = sy !== null && sy !== void 0 ? sy : 0;\n        this._sw = swidth !== null && swidth !== void 0 ? swidth : 1;\n        this._sh = sheight !== null && sheight !== void 0 ? sheight : 1;\n    }\n    /**\n     * The image to display\n     * @readonly\n     */\n    get image() {\n        return this._img;\n    }\n    /**\n     * Sets the image to have a width of `width` while maintaining the aspect ratio\n     * @param width the new width\n     */\n    setAspectWidth(width) {\n        const { w, h } = this.aspectRatio;\n        this.width = width;\n        this.height = (h / w) * width;\n        return this;\n    }\n    /**\n     * Sets the image to have a height of `height` while maintaining the aspect ratio\n     * @param height the new height\n     */\n    setAspectHeight(height) {\n        const { w, h } = this.aspectRatio;\n        this.height = height;\n        this.width = (w / h) * height;\n        return this;\n    }\n    /**\n     * The aspect ratio of the image\n     * @readonly\n     */\n    get aspectRatio() {\n        const { naturalWidth, naturalHeight } = this._img;\n        const f = gcf(naturalWidth, naturalHeight);\n        return {\n            w: naturalWidth / f,\n            h: naturalHeight / f,\n        };\n    }\n    /**\n     * Sets a new portion of the image to display\n     * @param sx the x-position of the clip\n     * @param sy the y-position of the clip\n     * @param swidth the width of the clip\n     * @param sheight the height of the clip\n     */\n    setClip(sx, sy, swidth, sheight) {\n        this._sx = sx;\n        this._sy = sy;\n        this._sw = swidth;\n        this._sh = sheight;\n        return this;\n    }\n    /**\n     * Returns the clip of the image\n     * @returns {Object<{ sx: number, sy: number, swidth: number, sheight: number }>}\n     */\n    getClip() {\n        return { sx: this._sx, sy: this._sy, swidth: this._sw, sheight: this._sh };\n    }\n    draw() {\n        const cx = this.still ? 0 : camera.x;\n        const cy = this.still ? 0 : camera.y;\n        super.draw();\n        if (this._hasLoaded) {\n            ctx.save();\n            ctx.beginPath();\n            ctx.translate(this.x + this.width / 2 - cx, this.y + this.height / 2 - cy);\n            ctx.rotate(this.rotation);\n            ctx.drawImage(this._img, this._sx, this._sy, this._sw, this._sh, -this.width / 2, -this.height / 2, this.width, this.height);\n            ctx.restore();\n        }\n    }\n}\n","import { add, remove, checkColor, isElementAdded } from \"./index\";\n/**\n * The base shape that all other shapes inherit from\n */\nexport class baseObj {\n    /**\n     * @constructor\n     */\n    constructor() {\n        /**\n         * Whether or not the Shape moves with the camera.\n         * Still shapes are drawn on top of other shapes.\n         */\n        this.still = false;\n        this._x = 0;\n        this._y = 0;\n        this._color = \"black\";\n        this._type = \"Thing\";\n        this._rot = 0;\n        this._outline = false;\n        this._outlineColor = \"black\";\n        this._outlineWidth = 1;\n    }\n    toString() {\n        return `${this.type} at (${this._x}, ${this._y})`;\n    }\n    /**\n     * The type of the shape\n     */\n    set type(v) {\n        this._type = v;\n    }\n    get type() {\n        return this._type;\n    }\n    /**\n     * Returns the type of the Shape\n     */\n    getType() {\n        return this._type;\n    }\n    setPosition(x, y) {\n        if (typeof x === \"number\") {\n            this._x = x;\n            this._y = y;\n        }\n        else {\n            this._x = x.x;\n            this._y = x.y;\n        }\n        return this;\n    }\n    /**\n     * Sets the color of the shape to `color`\n     * @param color css color, hexadecimal string, or rgba() string\n     */\n    setColor(color) {\n        if (!checkColor(color)) {\n            console.warn(`Your color of ${color} is not a valid color`);\n        }\n        this.color = checkColor(color) ? color : \"black\";\n        return this;\n    }\n    setOutline(show, color, width) {\n        this.outline = show;\n        this.outlineColor = color || this.outlineColor;\n        this.outlineWidth = width || this.outlineWidth;\n        return this;\n    }\n    setBorder(show, color, width) {\n        this.outline = show;\n        this.outlineColor = color || this.outlineColor;\n        this.outlineWidth = width || this.outlineWidth;\n        return this;\n    }\n    /**\n     * Sets the color of the shape's outline to `color`\n     * @param color css color, hexadecimal string, or rgba() string\n     */\n    setOutlineColor(color) {\n        this.outlineColor = color;\n        return this;\n    }\n    /**\n     * Sets the color of the shape's outline to `color` (same as setOutlineColor)\n     * @param color css color, hexadecimal string, or rgba() string\n     */\n    setBorderColor(color) {\n        this.outlineColor = color;\n        return this;\n    }\n    /**\n     * Sets the width of the shape's outline to `width`\n     * @param width the new widthoo of the outline\n     */\n    setOutlineWidth(width) {\n        this.outlineWidth = width;\n        return this;\n    }\n    /**\n     * Sets the width of the shape's outline to `width` (same as setOutlineWidth)\n     * @param width the new width of the outline\n     */\n    setBorderWidth(width) {\n        this.outlineWidth = width;\n        return this;\n    }\n    /**\n     * Whether or not to draw outline\n     */\n    set outline(v) {\n        this._outline = v;\n    }\n    get outline() {\n        return this._outline;\n    }\n    /**\n     * Whether or not to draw outline (same as borderWidth)\n     */\n    set borderWidth(v) {\n        this.outlineWidth = v;\n    }\n    get borderWidth() {\n        return this.outlineWidth;\n    }\n    /**\n     * Whether or not to draw outline\n     */\n    set outlineWidth(v) {\n        if (v < 0) {\n            console.warn(`The outline width should be positive, please fix your outline width of ${v}`);\n            v = Math.abs(v);\n        }\n        this._outlineWidth = v;\n    }\n    get outlineWidth() {\n        return this._outlineWidth;\n    }\n    /**\n     * Whether or not to draw outline (same as outline)\n     */\n    set border(v) {\n        this._outline = v;\n    }\n    get border() {\n        return this._outline;\n    }\n    /**\n     * The outline's color\n     */\n    set outlineColor(v) {\n        if (!checkColor(v)) {\n            console.warn(`Your color of ${v} is not a valid color`);\n        }\n        this._outlineColor = checkColor(v) ? v : \"black\";\n    }\n    get outlineColor() {\n        return this._outlineColor;\n    }\n    /**\n     * The outline's color (same as outlineColor)\n     */\n    set borderColor(v) {\n        this.outlineColor = v;\n    }\n    get borderColor() {\n        return this._outlineColor;\n    }\n    /**\n     * The shape's x-position\n     */\n    set x(v) {\n        this._x = v;\n    }\n    get x() {\n        return this._x;\n    }\n    /**\n     * Method to return the shapes x-position\n     */\n    getX() {\n        return this._x;\n    }\n    /**\n     * The shape's y-position\n     */\n    set y(v) {\n        this._y = v;\n    }\n    get y() {\n        return this._y;\n    }\n    /**\n     * Method to return the shapes y-position\n     */\n    getY() {\n        return this._y;\n    }\n    /**\n     * Move a shape `dx` pixels right and `dy` pixels left\n     * @param dx pixels to move along the x-axis\n     * @param dy pixels to move along the y-axis\n     */\n    move(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        return this;\n    }\n    /**\n     * The shape's rotation in degrees\n     */\n    set rotationDegrees(r) {\n        this._rot = (r * Math.PI) / 180;\n    }\n    get rotationDegrees() {\n        return (this._rot * 180) / Math.PI;\n    }\n    /**\n     * Rotate the shape by `degrees` degrees\n     * @param degrees number of degrees to rotate it by\n     */\n    rotateDegrees(degrees) {\n        this._rot += (degrees * Math.PI) / 180;\n        return this;\n    }\n    /**\n     * The shape's rotation in radians\n     */\n    set rotation(r) {\n        this._rot = r;\n    }\n    get rotation() {\n        return this._rot;\n    }\n    /**\n     * Rotate the shape by `radians` radians\n     * @param radians number of degrees to rotate it by\n     */\n    rotate(radians) {\n        this._rot += radians;\n        return this;\n    }\n    /**\n     * Returns the shapes rotation in radians\n     */\n    getRotation() {\n        return this._rot;\n    }\n    /**\n     * Returns the shapes rotation in degrees\n     */\n    getRotationDegrees() {\n        return (this._rot * 180) / Math.PI;\n    }\n    /**\n     * The shape's color\n     */\n    set color(v) {\n        if (!checkColor(v)) {\n            console.warn(`Your color of ${v} is not a valid color`);\n        }\n        this._color = checkColor(v) ? v : \"black\";\n    }\n    get color() {\n        return this._color;\n    }\n    /**\n     * Returns the shape's color\n     */\n    getColor() {\n        return this.color;\n    }\n    /**\n     * Adds the shape to the canvas\n     */\n    add() {\n        add(this);\n        return this;\n    }\n    /**\n     * Removes the shape from the canvas\n     */\n    remove() {\n        remove(this);\n        return this;\n    }\n    /**\n     * The shape's y-position\n     */\n    get added() {\n        return isElementAdded(this);\n    }\n    /**\n     * Checks if this element has been added\n     */\n    isAdded() {\n        return isElementAdded(this);\n    }\n    /**\n     * Sets whether to move the shape with the camera.\n     * Still shapes are drawn on top of other shapes\n     * @param still whether to move the shape with the camera\n     */\n    setStill(still) {\n        this.still = still;\n        return this;\n    }\n    /**\n     * Method called to draw the shape on the screen\n     */\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    draw() { }\n    /** Returns whether a shape is on screen */\n    onScreen() {\n        return false;\n    }\n    /**\n     * Returns a boolean to check if the shape contains the point (`x`, `y`)\n     * @param x x-position of point\n     * @param y y-position of point\n     */\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    containsPoint(x, y) {\n        return false;\n    }\n}\n","import { output } from \"./index\";\nconst createColoredSpan = (inner, color) => {\n    const s = document.createElement(\"span\");\n    s.innerHTML = inner;\n    s.style.color = color;\n    return s;\n};\nconst addSeparator = (pre) => {\n    if (pre.innerText) {\n        const d = document.createElement(\"div\");\n        d.style.height = \"1px\";\n        d.style.width = \"100%\";\n        d.style.backgroundColor = \"black\";\n        d.style.marginTop = \"5px\";\n        d.style.marginBottom = \"5px\";\n        d.className = \"separator\";\n        pre.append(d);\n    }\n};\n/**\n * Clears the output console\n */\nexport const clearConsole = () => {\n    while (output.lastChild) {\n        output.removeChild(output.lastChild);\n    }\n};\n/**\n * Logs any argument passed to the console\n * @param args arguments to print\n */\nexport const println = (...args) => {\n    addSeparator(output);\n    for (let i = 0; i < args.length; i++) {\n        if (args[i] === null) {\n            output.append(createColoredSpan(\"null\", \"deeppink\"));\n        }\n        else {\n            switch (typeof args[i]) {\n                case \"number\":\n                    {\n                        output.append(createColoredSpan(String(args[i]), \"purple\"));\n                    }\n                    break;\n                case \"object\":\n                    {\n                        // eslint-disable-next-line no-console\n                        console.log(args[i]);\n                        output.append(createColoredSpan(`${args[i].toString()} => browser console`, \"blue\"));\n                    }\n                    break;\n                case \"boolean\":\n                    {\n                        output.append(createColoredSpan(String(args[i]), \"red\"));\n                    }\n                    break;\n                case \"undefined\":\n                    {\n                        output.append(createColoredSpan(\"undefined\", \"deeppink\"));\n                    }\n                    break;\n                default:\n                    output.append(createColoredSpan(String(args[i]), \"black\"));\n            }\n        }\n        if (i !== args.length - 1) {\n            output.append(new Text(`, `));\n        }\n    }\n    output.scrollTop = output.scrollHeight;\n};\n/**\n * Returns the user's answer to the prompt as a string\n * @param message the prompt to ask the user\n */\nexport const readLine = (message) => {\n    return String(prompt(message));\n};\n/**\n * Returns the user's answer to the prompt as an integer\n * @param message the prompt to ask the user\n */\nexport const readInt = (message) => {\n    let ans;\n    if ((ans = parseInt(prompt(message) || \"\", 10))) {\n        return ans;\n    }\n    for (let i = 0; i < 100; i++) {\n        if ((ans = parseInt(prompt(\"Please enter an Integer. \" + message) || \"\", 10))) {\n            return ans;\n        }\n    }\n    return 0;\n};\n/**\n * Returns the user's answer to the prompt as a float\n * @param message the prompt to ask the user\n */\nexport const readFloat = (message) => {\n    let ans;\n    if ((ans = parseFloat(prompt(message) || \"\"))) {\n        return ans;\n    }\n    for (let i = 0; i < 100; i++) {\n        if ((ans = parseFloat(prompt(\"Please enter an Integer. \" + message) || \"\"))) {\n            return ans;\n        }\n    }\n    return 0;\n};\n/**\n * Returns the user's answer to the prompt as a boolean\n * @param message the prompt to ask the user\n * @param y the yes string\n * @param n the no string\n */\nexport const readBoolean = (message, y = \"y\", n = \"n\") => {\n    let ans;\n    if ((ans = prompt(`${message} (${y}|${n})`)) === y || ans === n) {\n        return ans === y;\n    }\n    for (let i = 0; i < 100; i++) {\n        if ((ans = prompt(`Please enter ${message} (${y}|${n})`)) === y || ans === n) {\n            return ans === y;\n        }\n    }\n    return false;\n};\n/**\n * Use this function to create your own console inputs if they are not supported by the library\n * @param message the message to display\n * @param submitHandler function to handle the submit\n * @param inputType the type of the input\n * @param submitButton whether to show a submit button or not\n * @async\n */\nexport const consoleInput = async (message, submitHandler, inputType, submitButton) => {\n    addSeparator(output);\n    output.append(new Text(`${message}: `));\n    const i = document.createElement(\"input\");\n    i.className = \"consoleInput\";\n    i.type = inputType;\n    i.value = \"\";\n    output.append(i);\n    let submit;\n    if (submitButton) {\n        submit = document.createElement(\"input\");\n        submit.style.marginLeft = \"10px\";\n        submit.className = \"consoleInput\";\n        submit.type = \"button\";\n        submit.value = \"Submit\";\n        output.append(submit);\n    }\n    const p = new Promise((resolve) => {\n        if (submitButton) {\n            i.addEventListener(\"change\", () => {\n                submit.value = `Submit: ${i.value}`;\n            });\n            submit.addEventListener(\"click\", function (e) {\n                if (!(e.metaKey || e.ctrlKey)) {\n                    const { value, done, color } = submitHandler(i, e);\n                    if (done) {\n                        i.before(createColoredSpan(String(value), String(color)));\n                        output.removeChild(i);\n                        output.removeChild(submit);\n                        resolve(value);\n                    }\n                }\n            }, false);\n        }\n        else {\n            i.addEventListener(\"keydown\", function (e) {\n                if (!(e.metaKey || e.ctrlKey)) {\n                    const { value, done, color } = submitHandler(i, e);\n                    if (done) {\n                        i.before(createColoredSpan(String(value), String(color)));\n                        output.removeChild(i);\n                        resolve(value);\n                    }\n                }\n            }, false);\n        }\n    });\n    i.focus();\n    output.scrollTop = output.scrollHeight;\n    return await p;\n};\n/**\n * Ask a question in the console and return a string\n * @param message question to ask\n * @async\n */\nexport const readLineConsole = async (message) => {\n    return await consoleInput(message, function (input, e) {\n        if (e.key === \"Enter\") {\n            return {\n                done: true,\n                value: input.value,\n                color: \"black\",\n            };\n        }\n        return { done: false };\n    }, \"text\");\n};\nconst readNumberConsole = async (message, validation, checks) => {\n    return await consoleInput(message, function (input, e) {\n        if (e.key === \"Enter\" && !isNaN(validation(input.value))) {\n            return {\n                done: true,\n                value: validation(input.value),\n                color: \"purple\",\n            };\n        }\n        if (e.key === \"-\" && input.value.length > 0) {\n            e.preventDefault();\n        }\n        if (checks && !checks(input.value, e)) {\n            return { done: false };\n        }\n        if (((isNaN(+e.key) && e.key.length < 2) || e.key === \" \") && !(e.key === \"-\")) {\n            e.preventDefault();\n        }\n        return { done: false };\n    }, \"number\");\n};\n/**\n * Ask a question in the console and return an integer\n * @param message question to ask\n * @async\n */\nexport const readIntConsole = async (message) => {\n    return await readNumberConsole(message, (str) => parseInt(str, 10));\n};\n/**\n * Ask a question in the console and return a float\n * @param message question to ask\n * @async\n */\nexport const readFloatConsole = async (message) => {\n    return await readNumberConsole(message, (str) => parseFloat(str), (value, e) => !(e.key === \".\" && value.split(\".\").length <= 1));\n};\n/**\n * Ask a question in the console and return a boolean value\n * @param message question to ask\n * @async\n */\nexport const readBooleanConsole = async (message) => {\n    return await consoleInput(message, function (input) {\n        return { done: true, color: \"red\", value: input.checked };\n    }, \"checkbox\", true);\n};\n/**\n * Asks the user to enter a color in the console\n * @param message the message to ask\n * @async\n */\nexport const readColorConsole = async (message) => {\n    return await consoleInput(message, function (input) {\n        return { done: true, color: input.value, value: input.value };\n    }, \"color\", true);\n};\n","export { canvas, ctx, output, getWidth, getHeight, hideCursor, setBackgroundColor, setSize, showCursor, getPosition, } from \"./setup\";\nexport { add, remove, removeAll, setUpdate, getElementAt, getElementsAt, shapes, isElementAdded, camera, moveHorizontal, moveVertical, } from \"./shapes\";\nexport { baseObj } from \"./baseObj\";\nexport { clearConsole, println, readBoolean, readFloat, readInt, readLine, consoleInput, readLineConsole, readIntConsole, readFloatConsole, readBooleanConsole, readColorConsole, } from \"./consoleCommands\";\nexport { Randomizer } from \"./Randomizer\";\nexport { Color, checkColor } from \"./Color\";\nexport { Keyboard } from \"./Keyboard\";\nexport { Circle } from \"./Circle\";\nexport { Rectangle } from \"./Rectangle\";\nexport { Line } from \"./Line\";\nexport { WebImage } from \"./WebImage\";\nexport { Text, checkFont } from \"./Text\";\nexport { Arc, ArcMode } from \"./Arc\";\nexport { Oval } from \"./Oval\";\nexport { setTimer, stopTimer, stopAllTimers, timers } from \"./Timers\";\nexport { keyDownMethod, mouseClickMethod, mouseMoveMethod, keyUpMethod } from \"./userInteraction\";\nexport { gcf, lineDistance, rotatePoint, toDegrees, toRadians } from \"./utils\";\n// eslint-disable-next-line no-console\nconsole.log(`%c\n   OIIIII              II        II    II   OIIIII    II         II      \n  OI                   II        II    II  OI         II      () II      \n OI        OIIO    OIIOII  OOOO  IIIIIIII   OIIIO     II         IIOIO   \n  OI      OI  IO  OI  IOI OI===O II    II       IO    II      II II  IO  \n   OIIIII  OIIO    OIIOII  Oooo  II    II  IIIIIO     IIIIIII II IIOIO   \n                                                                         \n has loaded                                                              \n                                                                         \n read the docs: %chttps://pythonkiwi123.github.io/documentation/\n`, \"font-family: monospace; color: lightgreen; background-color: black;\", \"background-color: black\");\n","import { camera } from \"./index\";\nconst outputDiv = \"output\";\n/**\n * The canvas everything is drawn to\n */\nexport const canvas = createCanvas(outputDiv);\n/**\n * The console println logs to\n */\nexport const output = createConsole(outputDiv);\n/**\n * The canvas context\n */\nexport const ctx = canvas.getContext(\"2d\");\nif (!ctx) {\n    throw new Error(\"Error creating canvas context. Check that the canvas is loading correctly.\");\n}\nfunction createCanvas(divId) {\n    const div = document.getElementById(divId);\n    if (!div) {\n        throw new Error(`Cannot find any element with the id of \"${divId}\". Please create that div in your html file.`);\n    }\n    const c = document.createElement(\"canvas\");\n    c.height = 480;\n    c.width = 400;\n    c.id = \"game\";\n    div.append(c);\n    return c;\n}\nfunction createConsole(divId) {\n    const div = document.getElementById(divId);\n    if (!div) {\n        throw new Error(`Cannot find any element with the id of \"${divId}\". Please create that div in your html file.`);\n    }\n    const p = document.createElement(\"pre\");\n    p.id = \"console\";\n    div.append(p);\n    return p;\n}\n/**\n * Returns the width of the canvas\n */\nexport const getWidth = () => canvas.width;\n/**\n * Returns the height of the canvas\n */\nexport const getHeight = () => canvas.height;\n/**\n * Set the width and height of the canvas\n * @param width the canvas's new width\n * @param height the canvas's new height\n */\nexport const setSize = (width, height) => {\n    canvas.width = width;\n    canvas.height = height;\n};\n/**\n * Set the background color of the canvas\n * @param color the new background color\n */\nexport const setBackgroundColor = (color) => {\n    canvas.style.backgroundColor = color;\n};\n/**\n * Show the mouse over the canvas\n * @param cursor (optional) the css cursor to show\n */\nexport const showCursor = (cursor) => {\n    canvas.style.cursor = cursor || \"default\";\n};\n/**\n * Hide the mouse over the canvas\n */\nexport const hideCursor = () => {\n    canvas.style.cursor = \"none\";\n};\nexport function getPosition(e, still) {\n    const { left, top } = canvas.getBoundingClientRect();\n    if (still) {\n        return {\n            x: e.clientX - left,\n            y: e.clientY - top,\n        };\n    }\n    return {\n        x: e.clientX - left + camera.x,\n        y: e.clientY - top + camera.y,\n    };\n}\n","import { canvas, ctx } from \"./index\";\n/**\n * All the shapes that have been added to the screen\n */\nexport const shapes = [];\n/** @ignore */\nlet up = true;\n/**\n * Set whether the canvas should update every frame\n * @param update whether to redraw each frame;\n */\nexport const setUpdate = (update) => {\n    up = update;\n};\n/**\n * Removes all objects from the canvas\n */\nexport const removeAll = () => {\n    shapes.splice(0, shapes.length);\n};\n/**\n * Adds all shapes that are passed to the screen\n * @param args any number of shapes to add\n */\nexport const add = (...args) => {\n    setTimeout(() => {\n        args.forEach((e) => {\n            if (shapes.indexOf(e) !== -1) {\n                remove(e);\n            }\n            shapes.push(e);\n            if (!up) {\n                e.draw();\n            }\n        });\n    });\n};\n/**\n * Removes all shapes that are passed from the screen\n * @param args shapes to remove\n */\nexport const remove = (...args) => {\n    setTimeout(() => {\n        args.forEach((e) => {\n            if (shapes.indexOf(e) !== -1) {\n                shapes.splice(shapes.indexOf(e), 1);\n            }\n        });\n    });\n};\n/**\n * Returns the shape that is on the top at the point (`x`, `y`)\n * @param x x-coordinate to check\n * @param y y-coordinate to check\n */\nexport const getElementAt = (x, y) => {\n    let elem = undefined;\n    for (const s of shapes) {\n        if (s.containsPoint(x, y)) {\n            elem = s;\n        }\n    }\n    return elem;\n};\n/**\n * Returns the all the shapes that are at the point (`x`, `y`)\n * @param x the x-value to find, if set to true it returns all the shapes onscreen\n * @param y the y-value to check\n */\nexport function getElementsAt(x, y) {\n    var _a;\n    if (x === true) {\n        return shapes;\n    }\n    if ((_a = x) === null || _a === void 0 ? void 0 : _a.x) {\n        y = x.y;\n        x = x.x;\n    }\n    const elems = [];\n    shapes.forEach((i) => {\n        if (i.containsPoint(x, y)) {\n            elems.push(i);\n        }\n    });\n    return elems.reverse();\n}\n/**\n * Check if an element has been added to the screen\n * @param e The element to check\n */\nexport function isElementAdded(e) {\n    return shapes.includes(e);\n}\n/** The location of the screen, useful for screen scrolling */\nexport const camera = {\n    x: 0,\n    y: 0,\n    setPosition(x, y) {\n        if (typeof x === \"number\") {\n            this.x = x;\n            this.y = y;\n        }\n        else {\n            this.x = x.x;\n            this.y = x.y;\n        }\n    },\n};\n/** Moves the camera horizontally */\nexport function moveHorizontal(dx) {\n    camera.x += dx;\n}\n/** Moves the camera vertically */\nexport function moveVertical(dx) {\n    camera.x += dx;\n}\nconst main = () => {\n    if (up) {\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        shapes\n            .filter((s) => s.still || s.onScreen())\n            .sort((s) => (s.still ? 1 : 0))\n            .forEach((s) => s.draw());\n    }\n    requestAnimationFrame(main);\n};\nmain();\n","import { canvas } from \"./index\";\n/**\n * Set the canvas onclick method, use canvas.onclick instead (included for compatibility with CodeHS)\n * @deprecated\n */\nexport const mouseClickMethod = (func) => {\n    canvas.onclick = func;\n};\n/**\n * Set the canvas mousemove method, use canvas.onmousemove instead (included for compatibility with CodeHS)\n * @deprecated\n */\nexport const mouseMoveMethod = (func) => {\n    canvas.onmousemove = func;\n};\n/**\n * Set the document's keydown method, use window.onkeydown instead (included for compatibility with CodeHS)\n * @deprecated\n */\nexport const keyDownMethod = (func) => {\n    window.onkeydown = func;\n};\n/**\n * Set the document's keyup method, use window.onkeyup instead (included for compatibility with CodeHS)\n * @deprecated\n */\nexport const keyUpMethod = (func) => {\n    window.onkeyup = func;\n};\n","/**\n * Returns point (`x`, `y`) if it where rotated around (0, 0) by `radians` radians\n * @param x A numeric expression for the x coordinate.\n * @param y A numeric expression for the y coordinate.\n * @param radians A numeric expression for the number of radians it is rotated.\n */\nexport const rotatePoint = (x, y, radians) => {\n    return {\n        x: Math.cos(radians) * x + Math.sin(radians) * y,\n        y: -(Math.sin(radians) * x) + Math.cos(radians) * y,\n    };\n};\n/**\n * Returns the distance of a line segment starting at (`x1`, `y1`)\n * and ending at (`x2`, `y2`)\n * @param x1 x-coordinate for the starting point\n * @param y1 y-coordinate for the starting point\n * @param x2 x-coordinate for the ending point\n * @param y2 y-coordinate for the ending point\n */\nexport const lineDistance = (x1, y1, x2, y2) => {\n    return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\n};\n/**\n * Returns the greatest common factor between `a` and `b`\n * @param a numerical expression\n * @param b numerical expression\n */\nexport const gcf = (a, b) => {\n    a = Math.max(Math.abs(a), Math.abs(b));\n    b = Math.min(Math.abs(a), Math.abs(b));\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        if (b === 0) {\n            return a;\n        }\n        a %= b;\n        if (a === 0) {\n            return b;\n        }\n        b %= a;\n    }\n};\n/**\n * Convert a number of degrees to radians\n * @param degrees the degrees to convert\n */\nexport const toRadians = (degrees) => {\n    return (degrees * Math.PI) / 2;\n};\n/**\n * Convert a number of radians to degrees\n * @param radians the radians to convert\n */\nexport const toDegrees = (radians) => {\n    return (radians * 2) / Math.PI;\n};\n"],"sourceRoot":""}